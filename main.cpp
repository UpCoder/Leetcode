#include <iostream>
//#include "./TwoSum1.cpp"
//#include "./LongestPalindromicSubstring3.cpp"
//#include "./ZigZagConversion.cpp"
//#include "./ReverseInteger.cpp"
//#include "./StringtoInteger.cpp"
//#include "PalindromeNumber.cpp"
//#include "RegularExpressionMatching.cpp"
//#include "ContainerWithMostWater.cpp"
//#include "IntegertoRoman.cpp"
//#include "RomantoInteger.cpp"
//#include "LongestCommonPrefix.cpp"
//#include "3Sum.cpp"
//#include "3SumClosest.cpp"
//#include "4Sum.cpp"
//#include "LetterCombinationsofaPhoneNumber.cpp"
//#include "ValidParentheses.cpp"
//#include "GenerateParentheses.cpp"
//#include "MergekSortedLists.cpp"
//#include "SwapNodesinPairs.cpp"
//#include "ReverseNodesink-Group.cpp"
//#include "RemoveDuplicatesfromSortedArray.cpp"
//#include "RemoveElement.cpp"
//#include "ImplementstrStr.cpp"
//#include "DivideTwoIntegers.cpp"
//#include "SubstringwithConcatenationofAllWords.cpp"
//#include "NextPermutation.cpp"
//#include "LongestValidParentheses.cpp"
//#include "SearchRotatedSortedArray.cpp"
//#include "FindFirstLastPositionElementSortedArray.cpp"
//#include "ValidSudoku.cpp"
//#include "SudokuSolver.cpp"
//#include "ReverseList.cpp"
//#include "FriendCircles.cpp"
//#include "ComvinationSumII.cpp"
//#include "TrappingRainWater.cpp"
//#include "Permutations.cpp"
//#include "PermutationsII.cpp"
//#include "RotateImage.cpp"
//#include "GroupAnagrams.cpp"
//#include "MaximumProductSubarray.cpp"
//#include "JumpGame.cpp"
//#include "MergeIntervals.cpp"
//#include "EditDistance.cpp"
//#include "DecodeWays.cpp"
// #include "UniquePathsIII.cpp"
//#include "MinimumPathSum.cpp"
// #include "MinimumWindowSubstring.cpp"
//#include "SlidingWindowMaximum.cpp"
//#include "Subsets.cpp"
//#include "WordSearch.cpp"
//#include "Trie.cpp"
//#include "WordSearchII.cpp"
//#include "Trie.cpp"
//#include "LargestRectangleinHistogram.cpp"
//#include "SegmentTree.cpp"
//#include "MaximalRectangle.cpp"
//#include "UniqueBinarySearchTrees.cpp"
//#include "ValidateBinarySearchTree.cpp"
//#include "BinaryTreeLevelOrderTraversal.cpp"
//#include "MaximumDepthofBinaryTree.cpp"
//#include "ConstructBinaryTreefromPreorderInorderTraversal.cpp"
//#include "FlattenBinaryTreetoLinkedList.cpp"
//#include "BinaryTreeMaximumPathSum.cpp"
//#include "LongestConsecutiveSequence.cpp"
//#include "SingleNumber.cpp"
//#include "WordBreak.cpp"
//#include "SortList.cpp"
//#include "LRUCache.cpp"
//#include "MinStack.cpp"
//#include "HouseRobberIII.cpp"
//#include "NumberofIslands.cpp"
//#include "ReverseLinkedListII.cpp"
//#include "CourseSchedule.cpp"
//#include "RemoveInvalidParentheses.cpp"
//#include "MaximalSquare.cpp"
//#include "PalindromeLinkedList.cpp"
//#include "LowestCommonAncestorBinaryTree.cpp"
//#include "ProductArrayExceptSelf.cpp"
//#include "PerfectSquares.cpp"
#include "FindDuplicateNumber.cpp"
int main() {
//    TwoSum1::test();
//    LongestPalindromicSubstring::test();
//    ZigZagConversion::test();
//    ReverseInteger::test();
//    StringtoInteger::test();
//    PalindromeNumber::test();
//    RegularExpressMatching::test();
//    ContainWithMostWater::test();
//    IntegerToRoman::test();
//    RomantoInteger::test();
//    LongestCommonPrefix::test();
//    Sum3::test();
//    Sum3Closest::test();
//    Sum4::test();
//    LetterCombination::test();
//    ValidParentheses::test();
//    GenerateParentheses::test();
//    MergeKSortedLists::test();
//    SwapNodesinPairs::test();
//    ReverseNodesinK_Group::test();
//    RemoveDuplicatesfromSortedArray::test();
//    RemoveElement::test();
//    ImplementstrStr::test();
//    DivideTwoIntegers::test();
//    SubstringwithConcatenationofAllWords::test();
//    NextPermutation::test();
//    LongestValidParentheses::test();
//    SearchRotatedSortedArray::test();
//    FindFirstLastPositionElementSortedArray::test();
//    ValidSudoku::test();
//    SodukuSolver::test();
//    ReverseListTest::test();
//    FriendCircles::test();
//    CombinationSum::test();
//    TrappingRainWater::test();
//    Permutations::test();
//    PermutationsII::test();
//    RotateImage::test();
//    GroupAnagrams::test();
//    MaximumProductSubarray::test();
//    JumpGame::test();
//    MergeIntervals::test();
//    EdieDistance::test();
//    DecodeWays::test();
    Solution::solution();

    std::cout << "Hello, World!" << std::endl;
    return 0;
}